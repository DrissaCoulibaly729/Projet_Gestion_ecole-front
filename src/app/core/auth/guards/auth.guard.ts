import { Injectable } from '@angular/core';
import { CanActivate, Router, ActivatedRouteSnapshot } from '@angular/router';
import { AuthService } from '../services/auth.service';
import { Observable, map, take } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class AuthGuard implements CanActivate {
  
  constructor(
    private authService: AuthService,
    private router: Router
  ) {}

  /**
   * ‚úÖ SOLUTION PRINCIPALE : Utiliser Observable pour attendre la mise √† jour
   */
  canActivate(route: ActivatedRouteSnapshot): Observable<boolean> {
    console.log('üé® AuthGuard - V√©rification avec Observable...');
    
    // ‚úÖ Attendre que l'√©tat d'authentification soit stable
    return this.authService.isAuthenticated$.pipe(
      take(1), // Prendre la premi√®re valeur √©mise
      map(isAuthenticated => {
        console.log('üé® AuthGuard - √âtat auth re√ßu:', isAuthenticated);
        
        if (!isAuthenticated) {
          console.log('‚ùå AuthGuard - Non authentifi√©, redirection vers login');
          this.router.navigate(['/auth/login']);
          return false;
        }

        console.log('‚úÖ AuthGuard - Utilisateur authentifi√©');

        // V√©rifier le r√¥le requis
        const requiredRole = route.data?.['role'];
        if (requiredRole) {
          const currentUser = this.authService.currentUser;
          if (!currentUser || !this.authService.hasRole(requiredRole)) {
            console.log('‚ùå AuthGuard - R√¥le insuffisant:', requiredRole, 'vs', currentUser?.role);
            this.router.navigate(['/unauthorized']);
            return false;
          }
          console.log('‚úÖ AuthGuard - R√¥le autoris√©:', requiredRole);
        }

        console.log('‚úÖ AuthGuard - Acc√®s accord√©');
        return true;
      })
    );
  }
}